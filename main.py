import openai
import gradio as gr
import simple_icd_10 as icd
import numpy as np
import ast
from dotenv import load_dotenv
import os

# Load in the API key from the .env file or ask the user to input it
try:
    load_dotenv()
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
    openai.api_key = OPENAI_API_KEY
    if not OPENAI_API_KEY:
        raise ValueError("API key not found in .env file.")

except ValueError as e:
    print(e)
    OPENAI_API_KEY = input("Please enter your OpenAI API key: ")


# Helper Functions
def generate_output(input_text, system_message, model="gpt-3.5-turbo", temperature=0, max_tokens=500):
    """
    Obtain the model's response based on the input text, system message, and optional model parameters.
    
    Parameters:
    - input_text (str): Text input from the user.
    - system_message (str): System's instruction or context for the model.
    - model (str, optional): The model to be used. Defaults to "gpt-3.5-turbo".
    - temperature (float, optional): Sampling temperature. Defaults to 0.
    - max_tokens (int, optional): Maximum tokens to be generated by the model. Defaults to 500.

    Returns:
    - str: Model's completion based on input.
    """
    
    user_message = f"{input_text}"
    
    messages = [
        {'role':'system', 
         'content': system_message},
        {'role':'user', 
         'content': user_message},
    ]
    
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=temperature, 
        max_tokens=max_tokens,
    )
    return response.choices[0].message["content"]

def dict_to_string(d):
    """
    Convert a dictionary or a string representation of a dictionary to a formatted string.

    Parameters:
    - d (dict/str): Dictionary or string representation of a dictionary.

    Returns:
    - str: Formatted string representation of the dictionary.
    
    Raises:
    - ValueError: If the input is neither a valid dictionary nor can be converted to one.
    """
    
    if not isinstance(d, dict):
        try:
            d = ast.literal_eval(d)
            if not isinstance(d, dict):
                raise ValueError("Input is not a dictionary and couldn't be converted to one.")
        except (ValueError, SyntaxError):
            raise ValueError("Input is not a valid dictionary or dictionary string.")
            
    return '\n'.join([f"{key}: {value}" for key, value in d.items()])


# ICD-10 Section
def ICD10_Coding_agent(scenario):
    """
    AI Agent that generates ICD-10 codes for a given medical scenario.

    Parameters:
    - scenario (str): Medical scenario to be coded.

    Returns:
    - str: String formatted as a dictionary of ICD-10 codes and their descriptions.
    """

    system_message = """You are a expert ICD-10 biller/coder, skilled in providing the most accurate, complete and relevant ICD-10 codes for any situation. To assist with the task, you will be provided as set of example scenarios as well as the respective codes.

Example 1 Scenario:
"A patient was admitted because of suspected carcinoma of the colon Exploratory laparotomy was carried out, and a significant mass was discovered in the sigmoid colon. The sigmoid colon was resected and end-to-end
anastomosis accomplished. Small nodules were noted on the liver, and a needle biopsy of the liver was performed during the procedure. The pathology report confirmed adenocarcinoma of the sigmoid colon with metastasis to the liver."

Example 1 codes:
{
    "C18.7": "Malignant neoplasm of sigmoid colon",
    "C78.7": "Secondary malignant neoplasm of liver and intrahepatic bile duct",
    "0DTN0ZZ": "Resection of sigmoid colon, open approach",
    "0FB00ZX": "Excision of liver, open approach, diagnostic"
}


Example 2 scenario:
"A patient was discharged following prostate surgery with an indwelling urethral catheter in place. He was readmitted with urinary sepsis due to methicillin-resistant Staphylococcus aureus (MRSA) due to the presence of the catheter. The physician confirmed the diagnosis of sepsis due to MRSA. The catheter was removed and the patient started on antibiotic therapy.
The patientâ€™s condition improved over several days, and he was discharged without an indwelling catheter"

Example 2 codes:
{
    "T83.511A": "Urinary sepsis due to indwelling urethral catheter, initial encounter",
    "A41.02": "Sepsis due to Methicillin resistant Staphylococcus aureus",
    "N39.0": "Urinary tract infection, site not specified",
    "Y84.6": "Urinary catheterization as the cause of abnormal reaction of the patient, or of later complication, without mention of misadventure at the time of the procedure",
    "0TPDX0Z": "Removal of drainage device from urethra, external approach"
}

Now following the example above, assign all the necessary ICD-10 codes for the user provided scenario. The codes should be returned in the form of a python dictionary, with the key being an ICD-10 code and the value being the codes description. Do not include any other text in your output. Do not repeat codes."""
     
    return generate_output(scenario, system_message)


def ICD10_Validation_agent(scenario):
    """
    AI Agent to validate and correct ICD-10 codes for a given medical scenario.

    Parameters:
    - scenario (str): Medical scenario with associated ICD-10 codes.

    Returns:
    - str: String formatted as a dictionary of corrected ICD-10 codes and their descriptions.
    """
    system_message = """You will take on the role of an expert ICD-10 biller/coder, skilled in taking in clinical notes and scenarios and writing out the most accurate ICD-10 codes for each situation. 

You will be given a scenario and a python dictionary containing ICD-10 codes. Your task will be to assess the codes and their relevance to the situation, and add or remove the codes based on your expertise. Be as thorough as possible in your analysis and make sure you use both ICD-CM and ICD-10-PCS coding. 

The input will be a list of codes. Present the output as a python dictionary, with each entry in the dictionary being a code and its description in valid ICD-10 format. Do not include any reasoning or supplementory text."""
    
    codes = ICD10_Coding_agent(scenario)
    return generate_output(codes, system_message)
    

def ICD10_Potential_Hallucinations(ICD10_codes):
    """
    Check the validity of provided ICD-10 codes and descriptions.

    Parameters:
    - ICD10_codes (str): String representation of a dictionary containing ICD-10 codes and their descriptions.

    Returns:
    - dict: Dictionary of valid ICD-10 codes. Invalid ones are excluded.
    """
    
    ICD10_codes = ast.literal_eval(ICD10_codes)   # LLM output is a string so first need to convert it to a dictionary
    codes = list(ICD10_codes.keys())    # Only looking at if the codes are valid and not descriptions
    
    for code in codes:
        # Check to ensure that the codes are present in ICD-10 
        if icd.is_valid_item(code) == False:
            print(f"Invalid code {code}")
            print(f"Invalid Description {ICD10_codes[code]}")
            del ICD10_codes[code]
            
    return ICD10_codes 
       
#CPT Section
def CPT_Coding_agent(scenario):
    """
    AI Agent that generates CPT codes for a given medical scenario.

    Parameters:
    - scenario (str): Medical scenario to be coded.

    Returns:
    - str: String formatted as a dictionary of CPT codes and their descriptions.
    """

    system_message = """You are a expert CPT coder, skilled in providing the most accurate, complete and relevant CPT codes for any given clinical situation. Assign all the necessary CPT codes for the user provided scenario. The codes should be returned in the form of a bulleted list, with each entry representing a code and its description. Do not include any other text in your output. Do not repeat codes."""
     
    return generate_output(scenario, system_message)

def CPT_Validation_agent(scenario):
    """
    AI Agent to validate and correct CPT codes for a given medical scenario.

    Parameters:
    - scenario (str): Medical scenario with associated CPT codes.

    Returns:
    - str: Bulleted list of CPT codes and their descriptions 
    """
    
    system_message = """You will take on the role of an expert CPT coder, skilled in taking in clinical notes and scenarios and writing out the most accurate CPT codes for each situation. 

You will be given a scenario and a bulleted list of CPT codes. Your task will be to assess the codes and their relevance to the situation, and add or remove the codes based on your expertise. Be as thorough as possible in your analysis. 

Present the output as a bulleted list of codes (mark each new entry with a '>' character), with each entry being a code and its description in valid CPT format. Do not include any reasoning or supplementory text."""
    
    codes = CPT_Coding_agent(scenario)
    return generate_output(codes, system_message)


#Snomed Section
def Snomed_Coding_agent(scenario):
    """
    AI Agent that generates Snomed codes for a given medical scenario.

    Parameters:
    - scenario (str): Medical scenario to be coded.

    Returns:
    - str: String formatted as a dictionary of Snomed codes and their descriptions.
    """

    system_message = """You are a expert Snomed coder, skilled in providing the most accurate, complete and relevant Snomed codes for any given clinical situation. Assign all the necessary Snomed codes for the user provided scenario. The codes should be returned in the form of a bulleted list, with each entry being a valid snomed code and its description. Do not include any other text in your output. Do not repeat codes."""
     
    return generate_output(scenario, system_message)

def Snomed_Validation_agent(scenario):
    """
    AI Agent to validate and correct Snomed codes for a given medical scenario.

    Parameters:
    - scenario (str): Medical scenario with associated Snomed codes.

    Returns:
    - str: String formatted as a dictionary of corrected Snomed codes and their descriptions.
    """
    
    system_message = """You will take on the role of an expert Snomed coder, skilled in taking in clinical notes and scenarios and writing out the most accurate Snomed codes for each situation. 

You will be given a scenario and bulleted list containing Snomed codes. Your task will be to assess the codes and their relevance to the situation, and add or remove the codes based on your expertise. Be as thorough as possible in your analysis. 

Present the output as a bulleted list (mark each new entry with a '>' character), with each entry being a code and its description in valid Snomed format. Do not include any reasoning or supplementory text."""
    
    codes = Snomed_Coding_agent(scenario)
    return generate_output(codes, system_message)


# Gradio main functions
def ICD10_main(clinical_syn, hallucination_check):
    
    validated_codes = ICD10_Validation_agent(clinical_syn)
    
    if hallucination_check == True:
        validated_codes = ICD10_Potential_Hallucinations(validated_codes)
    
    return dict_to_string(validated_codes)


def CPT_main(clinical_syn):
    validated_codes = CPT_Validation_agent(clinical_syn)
    return validated_codes

def Snomed_main(clinical_syn):
    validated_codes = Snomed_Validation_agent(clinical_syn)
    return validated_codes
  
intro_text = """ This tool enables the rapid generation of ICD-10, CPT, and SNOMED codes for any clinical scenario. It employs a two-step coding and validation system, leveraging the capabilities of LLMs and generative agents in the realm of medical coding.

- For ICD-10 codes, you can utilize the hallucination_checker feature to ensure that only codes from the ICD-10 database are included. (WARNING: The hallucination checker may occasionally exclude valid codes, so we recommend using it judiciously.)
- The CPT/SNOMED codes do not have a hallucination checker feature.
Always validate any code with a coding professional before making clinical decisions.
"""
    
# UI starts here

with gr.Blocks() as app:
    gr.Markdown("# Medical Code Generator")
    gr.Markdown(intro_text)
    with gr.Tab("ICD-10"):
        with gr.Row():
            ICD_input = gr.Textbox(label="Scenario")
            ICD_output = gr.Textbox(label="ICD-10 codes for scenario")
        
        ICD_hallucination_checkbox = gr.Checkbox(label="Hallucination checker")
        ICD_Button = gr.Button("Generate Codes")
    
    with gr.Tab("CPT"):
        with gr.Row():
            CPT_input = gr.Textbox(label="Scenario")
            CPT_output = gr.Textbox(label="CPT codes for scenario")
        
        CPT_Button = gr.Button("Generate Codes")
        
    with gr.Tab("Snomed"):
        with gr.Row():
            Snomed_input = gr.Textbox(label="Scenario")
            Snomed_output = gr.Textbox(label="Snomed codes for scenario")
        
        Snomed_button = gr.Button("Generate Codes")
    
    with gr.Accordion("Disclaimer"):
        gr.Markdown("""This tool was designed as a reference to aid in medical coding tasks. Ensure each output is verified with a licensed coding specialist.""")


    ICD_Button.click(ICD10_main, inputs=[ICD_input, ICD_hallucination_checkbox], outputs=ICD_output)
    CPT_Button.click(CPT_main, inputs=CPT_input, outputs=CPT_output)
    Snomed_button.click(Snomed_main, inputs=Snomed_input, outputs=Snomed_output)
    
app.launch()